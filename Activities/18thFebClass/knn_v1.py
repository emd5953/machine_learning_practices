# -*- coding: utf-8 -*-
"""KNN-v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lRPOS6Q4F7OhCYJY87J3BjnQk5B3seIV
"""

print("Hello world")

a =10
b =40
c = a+b
print(c)

import numpy as np
import math
import matplotlib.pyplot as plt
import pandas as pd

"""# K Nearest Neighbor

This algorithm selects k nearest neighbors from a given data point and assigns labels according to the neighborhood.

**Advantages:**
*   No assumption about data
*   Insensitive to outliers


**Disadvantages**
*   Requires huge memory
*   Requires computations

Often it is called ***instance based*** or ***lazy method***. It saves all the instances and searches for neighbors or closest elements. K is a very important hyper-parameter. After finding the labels of K nearest neighbor it then uses some aggreagting technique. 
*   Majority Voting (classification)
*   Weighted Voting (classification)
*   Uniform (regression)
*   distance weighted (regression)

## Lets create a dummy dataset and see how it works
"""

import numpy as np
feature_data = np.asarray([[0.0,1.0],
                           [-0.01,1.1],
                           [1.1,0.01],
                           [.99,-0.01]])

labels= np.asarray([1,1,0,0])

"""## Visualize the data"""

import matplotlib.pyplot as plt
plt.scatter(feature_data[:,0],feature_data[:,1], (labels+1)*20,(labels+1)*20)

"""## Implementation of KNN """

from numpy import *
import operator

def classifyKNN(test_x,X,y,k):
  # change the y label to vector
  y=np.reshape(y,(y.shape[0],))

  
  dataSetSize = X.shape[0]
  diffMat = np.tile(test_x, (dataSetSize,1)) - X
  sqDiffMat = diffMat**2
  sqDistances = sqDiffMat.sum(axis=1)
  distances = sqDistances**0.5

  sortedDistIndicies = distances.argsort()

  
  classCount={}
  for i in range(k):
    voteIlabel = y[sortedDistIndicies[i]]
    classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1
  sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)
  return sortedClassCount[0][0]

"""## Test with a simple point"""

classifyKNN([0.8,0],feature_data,labels,3)

"""## Test with a simple point"""

classifyKNN([0.2,0.9],feature_data,labels,3)